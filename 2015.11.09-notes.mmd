
```html
    <!doctype html>
    <html>
        <head>
            <title>
                Basic Function
            </title>
            <link rel='stylesheet' href='css/main.css'/>

        </head>
        <body>
            <h1>
                example title
            </h1>

            <div id='message'>welcome</div>
            

            <script type="text/javascript">

                var msg = 'some message';

                function updateMessage() {
                    var el = document.getElementbyId('message');
                    el.textContent = msg;
                }

                updateMessage();
            
            </script>
        </body>
    </html>
```

#multiple values out of single function

```js
    
    function getSize(width, height, depth) {
        var area = width * height;
        var volume = width * height * depth;
        var sizes = [area, volume];
        return sizes;
    }

    var areaOne = getSize(3,2,4)[0];
    var volumeOne = getSize(3,2,4)[1];

```


#FUNCTION DECLARATION: (i.e named functions):

```js

    function area(width, height) {
        return width*height;
    };

    var size = area(3,4);
```


#FUNCTION EXPRESSION: (anonymous function):

```js
    var area = function(width, height) {
        return width*height;
    }

    var size = area(3,4)
```

##IMMEDIETLY INVOKED FUNCTION EXPRESSION: IIFE

```js

    var area (function () {
        var width = 3;
        var height = 2;
        return width*height;

        }())

        //hold the value returned from function, not function itself
        //used for code that only needs to run once.
```

#VARIABLE SCOPE:

##local variable

    1. created inside a function using `var` keyword. 
    2. it can only be used in that function.
    3. created when fn() is run.

##global variables
    1. created outside function.
    2. stored in memory as long as webpage is loaded.
    3. only use for special cases, use local variables when possible.

#OBJECTS:
1. in an object variables become properties.
2. in an object fn() become methods()

```js

//LITERAL NOTATION
    
    var hotel = {
        //properties
        name: `hotel_name`,
        rooms: 40,
        booked: 23,
        gym: true,
        roomTypes: ['twin', 'double', 'suite'],
        //method
        checkAvail: function() {
            return this.rooms - this.booked;
        }
    };

    var elName = document.getElementbyId('hotelName');
    elName.textContent = hotel.name;

    var elRooms = document.getElementById('rooms');
    elRooms.textContent = hotel.checkAvailability();
    
```


##OBJECT properties:

```js
    var hotelName = hotel.name;
    var roomsFree = hotel.checkAvailability();
```

You can access object properties (NOT METHODS) using ['square notation']

```js
    var hotelName = hotel['name']; === var hotelName = hotel.name;
```



